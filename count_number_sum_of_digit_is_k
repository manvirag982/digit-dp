// first digit dp
/*You are given  test cases. Your task is to determine the  '100 sum' number corresponding to each test case.

Note: A '100 sum' number is defined as a number whose sum of all digit is equal to 100.

Input format

First line: Single integer  denoting the number of test cases
Next  lines: Single integer  representing the  100 sum number
Output format

For each test case, print a single integer in a new line that contains the correct answer.

Constraints


SAMPLE INPUT 
1
1
SAMPLE OUTPUT 
199999999999*/




#include<bits/stdc++.h>
using namespace std;
#define int long long int
#define ld long double
#define w(x) int x; cin>>x; while(x--)
#define fr(i,n)   for(int i=0;i<n;i++)
#define frr(i,n)  for(int i=1;i<=n;i++)
#define vi vector<int>
#define mod 1000000007
#define pi pair<int,int>
#define f first
#define s second
#define pb push_back
#define mk make_pair
#define all(x) x.begin(),x.end() 
#define i32 int32_t
#define i16 int16_t
#define fastio   ios_base::sync_with_stdio(false);cin.tie(NULL);
const int MAX =1e5;
int dp[18][2][163]; /// res come in 10^18 max sum - 18*9=162
//https://www.geeksforgeeks.org/count-numbers-smaller-than-or-equal-to-n-with-given-digit-sum/
int solve(int ix,int tight,int sumsofar,int sum,string number,int siz)
{
     if(ix==siz)
     {
         if(sumsofar==sum)
          return 1;
        else
          return 0;
     }

     int xx=dp[ix][tight][sumsofar];
     if(xx!=-1)
      return xx;

      int ans=0;


      // 0..9 digit possible
       // tight==false  .... contructed number till now is restricted
       // tgith ==true.....constructed number til now is non-restricted
     for(char digit='0';digit<='9';digit++)
     {    
          // contruction getting greater than mid 
          if(!tight&& number[ix]<digit)
            break;
          
          // further condition
          // id ccurrent is non restrcited the further will be non
          bool  temp=tight|| number[ix]>digit;
          int csumsofar=sumsofar+digit-'0'; 
          ans+=solve(ix+1,temp,csumsofar,sum,number,siz);
           



     }



     return dp[ix][tight][sumsofar]=ans;


}
int tn(int x)
{
      for(int i=0;i<18;i++)
        for(int j=0;j<2;j++)
          for(int k=0;k<163;k++)
            dp[i][j][k]=-1;

       string ss=to_string(x);
       int ans=solve(0,0,0,100,ss,ss.size());
       return ans;   
}
i32 main(){

  // time_t start,end;     // time(&start);// time(&end);
   fastio
   w(x)
   {
      int n; cin>>n;
      int l=0;
      int r=1e18;

      int ans;
      while(l<=r)
      {
           int mid=(l+r)/2;

           if(tn(mid)>=n)    // tn tell total number with given sum <=mid
           {
              ans=mid;
              r=mid-1;
           }
           else
            l=mid+1;
      }
      cout<<ans<<endl;


   }  
  //   double time_taken = double(end - start);    // cout << "Time taken by program is : " << fixed  //      << time_taken << setprecision(5); // cout << " sec " << endl; 

  return 0;
}
     
